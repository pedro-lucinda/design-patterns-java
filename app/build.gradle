/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation("org.json:json:20210307") 
}

application {
    // Define the main class for the application.
    mainClass = 'java.learn.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task runAdapterExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Adapter pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.adapter.Program'
}

task runCompositeExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Composite pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.composite.Program'
}

task runDecoratorExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Decorator pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.decorator.Program'
}

task runFacadeExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Facade pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.facedePattern.Program'
}

task runFactoryExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Factory pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.factoryPatter.Program'
}

task runProxyExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Proxy pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.proxy.Program'
}

task runSingletonExample(type: JavaExec) {
    group = 'Application'
    description = 'Runs the Singleton pattern example.'
    classpath = sourceSets.main.runtimeClasspath
    main = 'learn.singleton.Program'
}